version: 0.2

phases:
  install:
    runtime-versions:
      docker: 20
      python: 3.11
    commands:
      - echo "üì¶ Installing AWS CLI and Docker tools"
      - pip install --upgrade awscli

  pre_build:
    commands:
      - echo "üîë Logging in to Docker Hub"
      - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      # Retrieve app credentials and configuration from Secrets Manager
      - |
        if ! aws secretsmanager get-secret-value \
          --secret-id $SITE_SECRET_NAME \
          --region $AWS_REGION \
          --query SecretString \
          --output text > site-config.json; then
          echo "‚ùå ERROR: Secret $SITE_SECRET_NAME not found!"
          aws secretsmanager list-secrets --region $AWS_REGION --query "SecretList[?contains(Name, 'sites/${USER_ID}')].{Name:Name,CreatedDate:CreatedDate}"
          exit 1
        fi

      - jq -e 'has("db_endpoint") and has("db_username") and has("db_password") and has("alb_dns_name")' site-config.json >/dev/null || {
        echo "‚ùå Missing fields in the secret!"
        jq . site-config.json
        exit 1
      }

      # Extract variables from secret
      - echo "‚úÖ Loading variables from site-config.json"
      - export DB_HOST=$(jq -r '.db_endpoint // ""' site-config.json | cut -d':' -f1)
      - export DB_USERNAME=$(jq -r '.db_username // ""' site-config.json)
      - export DB_PASSWORD=$(jq -r '.db_password // ""' site-config.json)
      - export ALB_DNS=$(jq -r '.alb_dns_name // ""' site-config.json)
      - export IMAGE_TAG=$(date +%Y%m%d%H%M%S)

      # Validate extracted variables
      - |
        if [ -z "$DB_HOST" ] || [ -z "$DB_USERNAME" ] || [ -z "$DB_PASSWORD" ] || [ -z "$ALB_DNS" ]; then
          echo "‚ùå One or more required variables are empty!"
          echo "DB_HOST=$DB_HOST"
          echo "DB_USERNAME=$DB_USERNAME"
          echo "DB_PASSWORD=$DB_PASSWORD"
          echo "ALB_DNS=$ALB_DNS"
          exit 1
        fi

      # Debug extracted variables
      - echo "üîç Debug extracted variables:"
      - echo "DB_HOST=$DB_HOST"
      - echo "DB_USERNAME=$DB_USERNAME"
      - echo "DB_PASSWORD=$DB_PASSWORD"
      - echo "ALB_DNS=$ALB_DNS"
      - echo "IMAGE_TAG=$IMAGE_TAG"
      - echo "ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME"
      - echo "ECS_SERVICE_NAME=$ECS_SERVICE_NAME"
      - echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME"
      - echo "DOCKERHUB_PASSWORD=****"  # Mask password for security

  build:
    commands:
      - echo "üê≥ Building Docker image with tag: ${DOCKERHUB_USERNAME}/drupal-app:${IMAGE_TAG}"
      - docker build -t ${DOCKERHUB_USERNAME}/drupal-app:${IMAGE_TAG} .
      - echo "üê≥ Pushing Docker image to Docker Hub"
      - docker push ${DOCKERHUB_USERNAME}/drupal-app:${IMAGE_TAG}

      # Register new task definition with the new image
      - echo "üîÑ Updating ECS task definition with new image"
      - aws ecs describe-task-definition --task-definition $ECS_SERVICE_NAME --region $AWS_REGION > task-definition.json
      - jq --arg IMAGE "${DOCKERHUB_USERNAME}/drupal-app:${IMAGE_TAG}" '.taskDefinition.containerDefinitions[0].image = $IMAGE' task-definition.json > updated-task-definition.json
      - aws ecs register-task-definition --cli-input-json file://updated-task-definition.json --region $AWS_REGION
      - NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json --region $AWS_REGION --query 'taskDefinition.taskDefinitionArn' --output text)

      # Update ECS service with the new task definition
      - echo "üöÄ Updating ECS service with new task definition"
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $NEW_TASK_DEFINITION_ARN --region $AWS_REGION --force-new-deployment

  post_build:
    commands:
      # Wait for service to stabilize
      - echo "‚è≥ Waiting for service to stabilize"
      - aws ecs wait services-stable --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME --region $AWS_REGION

      # Validate deployment with ALB health check
      - echo "üîç Validating deployment via ALB DNS"
      - for i in {1..30}; do
          if curl -s -o /dev/null -w "%{http_code}" $ALB_DNS/health | grep -q "200"; then
            echo "‚úÖ ALB health check passed"
            break
          fi
          echo "‚è≥ Waiting for health check ($i/30)"
          sleep 10
        done

      - |
        if ! curl -s -o /dev/null -w "%{http_code}" $ALB_DNS/health | grep -q "200"; then
          echo "‚ùå ALB health check failed after 300 seconds!"
          exit 1
        fi

      - echo "‚úÖ Deployment to ECS cluster completed successfully!"

artifacts:
  files:
    - "**/*"  # No artifacts needed, kept for potential future use
