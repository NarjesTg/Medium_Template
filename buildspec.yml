version: 0.2

env:
  variables:
    SSH_USER: "ec2-user" 

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - docker --version
      - aws --version
      - echo "üì¶ Installing AWS CLI and Docker tools"
      - pip install --upgrade awscli

  pre_build:
    commands:
      - echo "Testing GitHub connectivity..."
      - curl -v https://github.com
      - nslookup github.com
      - echo "üîë Logging in to Docker Hub"
      - echo "üîë Logging in to Amazon ECR"
      - echo "Retrieving app credentials from Secrets Manager"
      - echo "üì¶ Setting ECR base URL"
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - ECR_BASE_URL="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
      - echo "üì¶ Logging in to ECR at $ECR_BASE_URL"
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_BASE_URL

      - |
        if ! aws secretsmanager get-secret-value \
          --secret-id $SITE_SECRET_NAME \
          --region $AWS_REGION \
          --query SecretString \
          --output text > site-config.json; then
          echo "Secret $SITE_SECRET_NAME not found!"
          aws secretsmanager list-secrets --region $AWS_REGION --query "SecretList[?contains(Name, 'sites/${USER_ID}')].{Name:Name,CreatedDate:CreatedDate}"
          exit 1
        fi
      - echo "‚úÖ Loading variables from site-config.json"
      - export DB_HOST=$(jq -r '.db_endpoint // ""' site-config.json | cut -d':' -f1)
      - export DB_USERNAME=$(jq -r '.db_username // ""' site-config.json)
      - export DB_PASSWORD=$(jq -r '.db_password // ""' site-config.json)
      - export ALB_DNS=$(jq -r '.alb_dns_name // ""' site-config.json)
      - export DB_NAME="db19abcccfds"  # Hardcoded as per task definition
      - export DB_PORT="3306"          # Hardcoded as per task definition
      - export REPO_NAME="${SITE_NAME}/drupal"
      - export IMAGE_TAG="latest"
      - export IMAGE_URI="$ECR_BASE_URL/$REPO_NAME:$IMAGE_TAG"
      - |
        if [ -z "$DB_HOST" ] || [ -z "$DB_USERNAME" ] || [ -z "$DB_PASSWORD" ] || [ -z "$ALB_DNS" ] || [ -z "$DB_NAME" ] || [ -z "$DB_PORT" ]; then
          echo "‚ùå One or more required variables are empty!"
          echo "DB_HOST=$DB_HOST"
          echo "DB_USERNAME=$DB_USERNAME"
          echo "DB_PASSWORD=$DB_PASSWORD"
          echo "ALB_DNS=$ALB_DNS"
          echo "DB_NAME=$DB_NAME"
          echo "DB_PORT=$DB_PORT"
          exit 1
        fi
      - echo "üîç Debug extracted variables:"
      - echo "DB_HOST=$DB_HOST"
      - echo "DB_USERNAME=$DB_USERNAME"
      - echo "DB_PASSWORD=****"
      - echo "ALB_DNS=$ALB_DNS"
      - echo "DB_NAME=$DB_NAME"
      - echo "DB_PORT=$DB_PORT"
      - echo "ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME"
      - echo "ECS_SERVICE_NAME=$ECS_SERVICE_NAME"
      - echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME"
      - echo "DOCKERHUB_PASSWORD=****"

  build:
    commands:
      - aws sts get-caller-identity 2> sts.log || { echo "‚ùå Failed to access AWS API"; cat sts.log; exit 1; }
      - echo "AWS_REGION=$AWS_REGION"
      - echo "ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME"
      - echo "ECS_SERVICE_NAME=$ECS_SERVICE_NAME"
      - if [ -z "$AWS_REGION" ]; then echo "‚ùå AWS_REGION is empty!"; exit 1; fi
      - if [ -z "$ECS_CLUSTER_NAME" ]; then echo "‚ùå ECS_CLUSTER_NAME is empty!"; exit 1; fi
      - if [ -z "$ECS_SERVICE_NAME" ]; then echo "‚ùå ECS_SERVICE_NAME is empty!"; exit 1; fi
      - echo "Testing ECS API connectivity"
      - curl -v https://ecs.$AWS_REGION.amazonaws.com 2> ecs-endpoint.log || { echo "‚ùå Failed to reach ECS endpoint"; cat ecs-endpoint.log; exit 1; }
      - echo "üîç Getting ECS task definition"
      - |
        TASK_DEF_ARN=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER_NAME \
          --services $ECS_SERVICE_NAME \
          --region $AWS_REGION \
          --query 'services[0].taskDefinition' \
          --output text) 2> error.log || { echo "‚ùå Failed to get task definition ARN"; cat error.log; exit 1; }
            echo "$TASK_DEF_ARN"
      - TASK_DEF_NAME=$(echo $TASK_DEF_ARN | awk -F'/' '{print $NF}' | awk -F':' '{print $1}')
      - echo "Using task definition $TASK_DEF_NAME"
      - aws ecs describe-task-definition --task-definition $TASK_DEF_NAME --region $AWS_REGION > task-definition.json 2> task-def-error.log || { echo "‚ùå Failed to describe task definition"; cat task-def-error.log; exit 1; }
      - if [ ! -f task-definition.json ]; then echo "‚ùå task-definition.json not found!"; exit 1; fi
      - echo "Building Docker image with tag"
      - docker build -t "$REPO_NAME:$IMAGE_TAG" .
      - echo "‚úÖ Logged in to ECR $ECR_BASE_URL"
      - docker tag "$REPO_NAME:$IMAGE_TAG" "$IMAGE_URI"
      - docker push "$IMAGE_URI"

      - echo "üîÑ Updating ECS task definition with new image and database environment variables"
      - |
        jq --arg IMAGE "$IMAGE_URI" \
           --arg DB_NAME "$DB_NAME" \
           --arg DB_HOST "$DB_HOST" \
           --arg DB_PORT "$DB_PORT" \
           --arg DB_USER "$DB_USERNAME" \
           --argjson DB_PASSWORD "\"$DB_PASSWORD\"" '
          .taskDefinition |
          del(.status, .taskDefinitionArn, .revision, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities) |
          if .runtimePlatform == null then del(.runtimePlatform) else . end |
          .containerDefinitions[0].image = $IMAGE |
          .containerDefinitions[0].environment = [
            {"name": "DB_NAME", "value": $DB_NAME},
            {"name": "DB_HOST", "value": $DB_HOST},
            {"name": "DB_PORT", "value": $DB_PORT},
            {"name": "DB_USER", "value": $DB_USER},
            {"name": "DB_PASSWORD", "value": $DB_PASSWORD}
          ]
        ' task-definition.json > updated-task-definition.json
      - echo "üîç Contents of updated-task-definition.json"
      - cat updated-task-definition.json
      - echo "üîÑ Validating JSON before registration"
      - jq '.' updated-task-definition.json 2> json-error.log || { echo "‚ùå Invalid JSON file"; cat json-error.log; exit 1; }
      - echo "üîç  Verifying environment variables in updated-task-definition.json"
      - jq '.containerDefinitions[0].environment' updated-task-definition.json
      - echo "üîç checking runtimePlatform in updated-task-definition.json"
      - jq '.runtimePlatform' updated-task-definition.json
      - echo "üì§ Registering new task definition with retry"
      - |
        for attempt in {1..3}; do
          echo "Attempt $attempt: Registering task definition"
          if NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-definition.json \
            --region $AWS_REGION \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text 2> register-error.log); then
            echo "$NEW_TASK_DEF_ARN"
            break
          else
            echo "‚ùå Failed to register task definition on attempt $attempt"
            cat register-error.log
            if [ $attempt -eq 3 ]; then
              echo "‚ùå All registration attempts failed"
              exit 1
            fi
            sleep 5
          fi
        done
      - if [ -z "$NEW_TASK_DEF_ARN" ]; then echo "‚ùå NEW_TASK_DEF_ARN is empty!"; exit 1; fi
      - echo "üöÄ Updating ECS service with new task definition"
      - |
        aws ecs update-service \
          --cluster $ECS_CLUSTER_NAME \
          --service $ECS_SERVICE_NAME \
          --task-definition $NEW_TASK_DEF_ARN \
          --region $AWS_REGION \
          --force-new-deployment 2> update-service.log || { echo "‚ùå Failed to update service"; cat update-service.log; exit 1; }
      - echo "Waiting for service to stabilize"
      - |
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER_NAME \
          --services $ECS_SERVICE_NAME \
          --region $AWS_REGION 2> wait-service.log || { echo "‚ùå Service failed to stabilize"; cat wait-service.log; exit 1; }
      - echo "Verifying updated service"
      - |
        aws ecs describe-services \
          --cluster $ECS_CLUSTER_NAME \
          --services $ECS_SERVICE_NAME \
          --region $AWS_REGION \
          --query 'services[0].{TaskDefinition:taskDefinition,RunningCount:runningCount,DesiredCount:desiredCount,ContainerImage:deployments[0].taskDefinition}' \
          --output json 2> verify-service.log || { echo "‚ùå Failed to verify service"; cat verify-service.log; exit 1; }

artifacts:
  files:
    - "**/*"  # No artifacts needed, kept for potential future use
